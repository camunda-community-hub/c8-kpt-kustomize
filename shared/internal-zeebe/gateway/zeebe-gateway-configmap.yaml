apiVersion: v1
kind: ConfigMap
metadata:
  name: zeebe-gateway-configmap
  namespace: camunda8-dev
  labels:
    app: camunda-platform # kpt-set: ${camunda-app-name}
    app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-gateway
data:
  application.yaml: |
    # Zeebe Standalone Broker configuration file (with embedded gateway)

    # This file is based on broker.standalone.yaml.template but stripped down to contain only a limited
    # set of configuration options. These are a good starting point to get to know Zeebe.
    # For advanced configuration options, have a look at the templates in this folder.

    # !!! Note that this configuration is not suitable for running a standalone gateway. !!!
    # If you want to run a standalone gateway node, please have a look at gateway.yaml.template

    # ----------------------------------------------------
    # Byte sizes
    # For buffers and others must be specified as strings and follow the following
    # format: "10U" where U (unit) must be replaced with KB = Kilobytes, MB = Megabytes or GB = Gigabytes.
    # If unit is omitted then the default unit is simply bytes.
    # Example:
    # sendBufferSize = "16MB" (creates a buffer of 16 Megabytes)
    #
    # Time units
    # Timeouts, intervals, and the likes, must be specified either in the standard ISO-8601 format used
    # by java.time.Duration, or as strings with the following format: "VU", where:
    #   - V is a numerical value (e.g. 1, 5, 10, etc.)
    #   - U is the unit, one of: ms = Millis, s = Seconds, m = Minutes, or h = Hours
    #
    # Paths:
    # Relative paths are resolved relative to the installation directory of the broker.
    # ----------------------------------------------------

    zeebe:
      broker:
        gateway:
          # Enable the embedded gateway to start on broker startup.
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_ENABLE.
          enable: true
          network:
            # Sets the port the embedded gateway binds to.
            # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_NETWORK_PORT.
            port: 26500
          security:
            # Enables TLS authentication between clients and the gateway
            # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_SECURITY_ENABLED.
            enabled: true
            # Sets the path to the certificate chain file
            # This setting can also be overridden using the environment variable ZEEBE_GATEWAY_SECURITY_CERTIFICATECHAINPATH.
            certificateChainPath: /usr/local/zeebe/tls/tls.crt
            # Sets the path to the private key file location
            # This setting can also be overridden using the environment variable ZEEBE_GATEWAY_SECURITY_PRIVATEKEYPATH.
            privateKeyPath: /usr/local/zeebe/tls/tls.key
        network:
          # Controls the default host the broker should bind to. Can be overwritten on a
          # per binding basis for client, management and replication
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_NETWORK_HOST.
          host: 0.0.0.0
        data:
          # Specify a directory in which data is stored.
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_DIRECTORY.
          directory: data
          # The size of data log segment files.
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_LOGSEGMENTSIZE.
          logSegmentSize: 128MB
          # How often we take snapshots of streams (time unit)
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_SNAPSHOTPERIOD.
          snapshotPeriod: 15m
        cluster:
          # Specifies the Zeebe cluster size.
          # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_CLUSTERSIZE.
          clusterSize: 1
          # Controls the replication factor, which defines the count of replicas per partition.
          # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR.
          replicationFactor: 1
          # Controls the number of partitions, which should exist in the cluster.
          # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT.
          partitionsCount: 1
        threads:
          # Controls the number of non-blocking CPU threads to be used.
          # WARNING: You should never specify a value that is larger than the number of physical cores
          # available. Good practice is to leave 1-2 cores for ioThreads and the operating
          # system (it has to run somewhere). For example, when running Zeebe on a machine
          # which has 4 cores, a good value would be 2.
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
          cpuThreadCount: 2
          # Controls the number of io threads to be used.
          # This setting can also be overridden using the environment variable ZEEBE_BROKER_THREADS_IOTHREADCOUNT
          ioThreadCount: 2
        interceptors:

    # Configure interceptors below.
    # Please consider reading our documentation on interceptors first.
    #
    # Each interceptors should be configured following this template:
    #
    # - id: zeebe-keycloak-interceptor
    #   #   identifier for this interceptor.
    #   #   This setting can also be overridden using the environment variable ZEEBE_GATEWAY_INTERCEPTORS_0_ID.
    #   jarPath: /usr/local/zeebe/zeebe-keycloak-interceptor.jar
    #   #   path (relative or absolute) to the JAR file containing the interceptor class and its dependencies.
    #   #   all classes must be compiled for the same language version as Zeebe or lower.
    #   #   This setting can also be overridden using the environment variable ZEEBE_GATEWAY_INTERCEPTORS_0_JARPATH.
    #   className: org.camunda.community.zeebe.keycloak.interceptor.ZeebeKeycloakInterceptor
    #   entry point of the interceptor, a class which must:
    #     - implement io.grpc.ServerInterceptor (see: https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html)
    #     - have public visibility
    #     - have a public default constructor (i.e. no-arg constructor)
    #   This setting can also be overridden using the environment variable ZEEBE_GATEWAY_INTERCEPTORS_0_CLASSNAME.
    #
    # Example configuration for a single interceptor
    # - id: example-interceptor
    #   className: com.acme.ExampleInterceptor
    #   jarPath: /path/to/interceptor/example-interceptor.jar
  log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN">

        <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        </Appenders>

        <Loggers>
        <Logger name="io.camunda.zeebe" level="debug"/>

        <Root level="debug">
            <AppenderRef ref="Console"/>
        </Root>
        </Loggers>

    </Configuration>
