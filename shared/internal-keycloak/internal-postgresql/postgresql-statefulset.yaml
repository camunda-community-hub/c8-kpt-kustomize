apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-postgresql
  labels:
    app: camunda-platform # kpt-set: ${camunda-app-name}
    app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
    app.kubernetes.io/name: keycloak-postgresql
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/component: keycloak-postgresql
    app.kubernetes.io/part-of: camunda-platform
spec:
  replicas: 1
  serviceName: camunda-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app: camunda-platform # kpt-set: ${camunda-app-name}
      app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
      app.kubernetes.io/name: keycloak-postgresql
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/component: keycloak-postgresql
      app.kubernetes.io/part-of: camunda-platform
  template:
    metadata:
      name: camunda-postgresql
      labels:
        app: camunda-platform # kpt-set: ${camunda-app-name}
        app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
        app.kubernetes.io/name: keycloak-postgresql
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/component: keycloak-postgresql
        app.kubernetes.io/part-of: camunda-platform
    spec:
      serviceAccountName: camunda-keycloak
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: camunda-platform
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: camunda
                    app.kubernetes.io/component: keycloak-postgresql
                    app.kubernetes.io/part-of: camunda-platform
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: bitnami/postgresql:14.6.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: keycloak-postgresql-data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: keycloak-postgresql-data
        labels:
          app: camunda-platform # kpt-set: ${camunda-app-name}
          app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
          app.kubernetes.io/name: keycloak-postgresql
          app.kubernetes.io/instance: camunda
          app.kubernetes.io/component: keycloak-postgresql
          app.kubernetes.io/part-of: camunda-platform
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
