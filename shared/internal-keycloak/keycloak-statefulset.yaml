apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-keycloak
  labels:
    app: camunda-platform # kpt-set: ${camunda-app-name}
    app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/part-of: camunda-platform
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: camunda-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app: camunda-platform # kpt-set: ${camunda-app-name}
      app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/part-of: camunda-platform
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 9d5f743bd8068b5a14717db8d5e076747c7ca7d50777e80a0eb5142fcfbc6e12
        checksum/secrets: 118ea35bf3a4e388a2126a5abcb50c700c8954eb4a8d747be8325921f17a2a3d
      labels:
        app: camunda-platform # kpt-set: ${camunda-app-name}
        app.kubernetes.io/version: "1.0.0" # kpt-set: ${camunda-app-version}
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/part-of: camunda-platform
    spec:
      serviceAccountName: camunda-keycloak
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: camunda
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
      initContainers:
        - command:
            - sh
            - -c
            - cp -a /app/keycloak-theme/* /mnt
          image: 'camunda/identity:8.1.5'
          imagePullPolicy: 'IfNotPresent'
          name: copy-camunda-theme
          volumeMounts:
            - mountPath: /mnt
              name: camunda-theme
      containers:
        - name: keycloak
          image: bitnami/keycloak:19.0.3
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            # - name: JDK_JAVA_OPTIONS
            #   value: "-Dlogging.level.root=debug -Djavax.net.ssl.trustStore=/etc/ssl/camunda/trust-store.jks -Djavax.net.ssl.trustStorePassword=demodemo -Djavax.net.ssl.keyStore=/etc/ssl/camunda/key-store.jks -Djavax.net.ssl.keyStorePassword=demodemo"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-keycloak
                  key: admin-password
            - name: KEYCLOAK_MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-keycloak
                  key: management-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: password
            - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
              value: 'true'
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: '/auth'
          # - name: KEYCLOAK_TLS_TRUSTSTORE_FILE
          #   value: /etc/ssl/camunda/trust-store.jks
          # - name: KEYCLOAK_TLS_TRUSTSTORE_PASSWORD
          #   value: demodemo
          # - name: KEYCLOAK_TLS_KEYSTORE_FILE
          #   value: /etc/ssl/camunda/trust-store.jks
          # - name: KEYCLOAK_TLS_KEYSTORE_PASSWORD
          #   value: demodemo

          envFrom:
            - configMapRef:
                name: camunda-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http-management
              containerPort: 9990
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /auth/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /auth/realms/master
              port: http
          volumeMounts:
            - mountPath: /opt/bitnami/keycloak/themes/identity
              name: camunda-theme
            - name: keystore
              mountPath: /etc/ssl/camunda
            # - name: camunda-keycloak
            #   mountPath: /opt/bitnami/keycloak/conf/keycloak.conf
            #   subPath: keycloak.conf
            - name: camunda-keycloak2
              mountPath: /opt/bitnami/scripts/libkeycloak.sh
              subPath: libkeycloak.sh
      volumes:
        - emptyDir:
            sizeLimit: 10Mi
          name: camunda-theme
        - name: keystore
          configMap:
            name: trust-store-jks
        # - name: camunda-keycloak
        #   configMap:
        #     name: camunda-keycloak
        - name: camunda-keycloak2
          configMap:
            name: camunda-keycloak
